# Included makefile for platform-specific build settings

# The comments at the beginnings of build settings sections
# are suggestions about what settings to place in them. Following
# these suggestions is helpful to maintaining clarity of the
# build system. However, feel free to make exceptions for
# individual settings if it makes sense to do so.

# ==================================================

PLATFORM_SPECIFIC_MAKEFILE := $(lastword $(MAKEFILE_LIST))
$(info ... including PLATFORM-SPECIFIC BUILD SETTINGS MAKEFILE: $(PLATFORM_SPECIFIC_MAKEFILE))

# Default compiler for the current platform
#
# Can alternatively be set by environment or command-line variable
#
# Examples:
#
#       NEPTUNE_COMPILER ?= intel
#       NEPTUNE_COMPILER ?= intel-crayenv
#

NEPTUNE_COMPILER ?= intel
$(info NEPTUNE_COMPILER: $(NEPTUNE_COMPILER))

# ---------------------------------------------------------------

# CPU or microarchitecture for the current platform
#
# Not all platforms will need this variable to be set. If the Intel
# compiler is being used (i.e., config.compiler.intel), then, at the
# time of writing this comment, the NEPTUNE_CPU variable is required
# to be set. For this case, look in config.compiler.intel for possible
# values.
#
# Can alternatively be set by environment or command-line variable
#
# Examples:
#
#        NEPTUNE_CPU ?= skylake
#        NEPTUNE_CPU ?= cascade_lake
#        NEPTUNE_CPU ?= broadwell_simple
#        NEPTUNE_CPU ?= broadwell
#        NEPTUNE_CPU ?= sandybridge
#        NEPTUNE_CPU ?= amd
#

NEPTUNE_CPU ?= skylake

# ---------------------------------------------------------------

# Define variables here that apply to both the current platform and
# to ALL compilers supported for the platform in the NEPTUNE build
# system. Can also do this in the section below just after the
# include command section.
#
# This section can also be used to prepend values to variables that
# are later defined with the "+=" operator (e.g., CPPFLAGS).
# These prepended values would be ones that apply to all compilers
# supported by the current platform in the NEPTUNE build system.
#
# Examples:
#
#     ifeq ($(FOR_GPU),t)
#       ...
#     else
#       ...
#     endif
#
#     CPPFLAGS += prepended values  # assuming CPPFLAGS hasn't
#                                   # yet been defined

ifeq ($(FOR_GPU),t)
  LEBLK ?= 32
  LCBLK ?= 32
  EVEC  ?= 1
  CVEC  ?= 1
else
  LEBLK ?= 4
  EVEC  ?= 4
  LCBLK ?= 4
  CVEC  ?= 4
endif
CPPFLAGS += -DLEBLK=$(LEBLK) -DLCBLK=$(LCBLK) -DEVEC=$(EVEC) -DCVEC=$(CVEC)

# ---------------------------------------------------------------

# General build settings that apply to all platforms and compilers

include $(CONFIG_DIR)/config.general_settings

$(info ... reentering PLATFORM-SPECIFIC BUILD SETTINGS MAKEFILE: $(PLATFORM_SPECIFIC_MAKEFILE))

# ---------------------------------------------------------------

# Define variables here that apply to both the current platform and
# to ALL compilers supported for the platform in the NEPTUNE build
# system. Can also do this in the section above just before the include
# command section.
#
# This section can also be used to append values to variables that
# are defined earlier in the makefile process. These appended values
# would be ones that apply to all compilers supported by the current
# platform in the NEPTUNE build system.
#
# Also, if needed for a special situation, here one can do a full
# resetting of a variable defined earlier in the general in the
# makefile process. This section is the last place where variables
# are defined before the make rules are "executed."
#
# Examples:
#
#     ifeq ($(FOR_GPU),t)
#       ...
#     else
#       ...
#     endif
#
#     FFLAGS += appended_value
#
#     FFLAGS := ...

# no settings here yet

