# Included makefile for build settings that are XLF (and XLC) compiler-specific
#
# There are separate sections for settings that apply to all
# platforms/cpus and for settings that don't apply to all
# platforms/cpus

# The comments at the beginnings of build settings sections
# are suggestions on what settings to place in them. Following
# these suggestions is helpful to maintaining clarity of the
# build system. However, feel free to make exceptions for
# individual settings if it makes sense to do so.

COMPILER_SPECIFIC_MAKEFILE := $(lastword $(MAKEFILE_LIST))
$(info ... including COMPILER-SPECIFIC BUILD SETTINGS MAKEFILE: $(COMPILER_SPECIFIC_MAKEFILE))

# ==========================================================
#
# Place here build settings that are both compiler-specific
# and platform-specific (and/or cpu-specific). This could be
# in the form of a variable definition or appending to an
# earlier defined variable.
#
# Can also do this in the last section of this file.
#
# Example:
#
#     ifeq ($(NEPTUNE_CPU), broadwell)
#        ... := ...
#        ... += ...
#     endif

# no settings here yet

# ==========================================================
#
# Place build settings here that are compiler-specific and
# apply to ALL platforms/cpus in the NEPTUNE build system
# that support the compiler.  This could be in the form of
# a variable definition or appending to an earlier defined
# variable.
#
# In special circumstances, when itâ€™s the only, best, or clearest
# way to get the build to work, build settings that are both
# compiler-specific and platform-specific (and/or cpu-specific)
# could also be placed in this section (rather than in the first or
# last build settings sections of this file)

CPPFLAGS += -D__xlf_compiler__

ifeq ($(OPENMP),t)
  OMPFLAGS := -qsmp=omp
  CPPFLAGS += -D_OPENMP_
  CFLAGS   += -D_OPENMP_   # needed by err_dup.h
endif
DEVICE := ""
ifeq ($(FOR_GPU),t)
  OMPOFFLOAD := -qoffload -qtgtarch=auto  -qcuda
  OMPOFFLOAD_LOWOPT :=  -Wx,-nvvm-compile-options=-opt=0 -qnoipa -qsmp=noopt -qnoopt -qnohot
  DEVICE := $(OMPOFFLOAD)
  CPPFLAGS += -DFOR_GPU
  ifneq (,$(findstring qoffload,$(DEVICE)))
    CPPFLAGS += -DOMP_OFFLOAD_ENABLED
  endif
endif
ifneq ($(SINGLE),t)
  AUTODBL :=  -qrealsize=8
else
  CPPFLAGS += -DSINGLE
endif

CC     := time mpicc $(DEVICE)
CXX    := time mpicxx $(DEVICE)
FC     := time mpif90 $(DEVICE)

FFOPT := #-O3
FFLAGS := $(OMPFLAGS) -I. -qstrict -I./mod $(OMPOFFLOAD)
FFLAGS_MOD_DOMAIN := $(OMPFLAGS) -I. -qstrict -I./mod $(OMPOFFLOAD) $(OMPOFFLOAD_LOWOPT)

ifneq (,$(findstring qoffload,$(DEVICE)))
  LDFLAGS += $(OMPFLAGS) $(AUTODBL) $(OMPOFFLOAD) -llapack -lblas  mylib/libibmcpp.so
  LD     := $(FC) #mpicxx $(DEVICE)
  CPPFLAGS += -DSTATIC_NEBLK=168 -DSTATIC_NGRIDS=1   # these need to be set at compile time for TBP to work with OpenMP Offload on IBM (maybe always)
else
  LDFLAGS += $(OMPFLAGS) $(AUTODBL) $(OMPOFFLOAD) -llapack -lblas  -Xcompiler $(OLCF_XL_ROOT)/lib/libxlf90_r.so.1 -Xcompiler $(OLCF_XL_ROOT)/lib/libxlfmath.so.1 -Xcompiler $(OPAL_PREFIX)/lib/libmpi_ibm_mpifh.so
  LD     := mpicxx $(DEVICE)
endif
CPPFLAGS += -DNEPTUNE_COMPILER=$(NEPTUNE_COMPILER)

AR := ar

# ==========================================================
#
# Place here build settings that are both compiler-specific
# and platform-specific (and/or cpu-specific). This could be
# a variable definition or appending to an earlier defined
# variable. Can also do this in the first build settings
# section of this file
#
# Following these build settings, there may be additional
# compiler-specific build settings that apply to all platforms/cpus
# because they need to be set after the platform- and/or
# cpu-specific build settings set in this section.
#
# Also, if needed, in this section one can overwrite
# previous variable definitions

# no settings here yet

