# Included makefile for build settings that are PGI compiler-specific
#
# There are separate sections for settings that apply to all
# platforms/cpus and for settings that don't apply to all
# platforms/cpus

# The comments at the beginnings of build settings sections
# are suggestions on what settings to place in them. Following
# these suggestions is helpful to maintaining clarity of the
# build system. However, feel free to make exceptions for
# individual settings if it makes sense to do so.

COMPILER_SPECIFIC_MAKEFILE := $(lastword $(MAKEFILE_LIST))
$(info ... including COMPILER-SPECIFIC BUILD SETTINGS MAKEFILE: $(COMPILER_SPECIFIC_MAKEFILE))

# ==========================================================
#
# Place here build settings that are both compiler-specific
# and platform-specific (and/or cpu-specific). This could be
# in the form of a variable definition or appending to an
# earlier defined variable.
#
# Can also do this in the last section of this file.
#
# Example:
#
#     ifeq ($(NEPTUNE_CPU), broadwell)
#        ... := ...
#        ... += ...
#     endif

# no settings here yet

# ==========================================================
#
# Place build settings here that are compiler-specific and
# apply to ALL platforms/cpus in the NEPTUNE build system
# that support the compiler.  This could be in the form of
# a variable definition or appending to an earlier defined
# variable.
#
# In special circumstances, when itâ€™s the only, best, or clearest
# way to get the build to work, build settings that are both
# compiler-specific and platform-specific (and/or cpu-specific)
# could also be placed in this section (rather than in the first or
# last build settings sections of this file)

CPPFLAGS += -D__pgi_compiler__

CPPFLAGS += -DOMP_OFFLOAD_DECLARE_TARGET=""

ifeq ($(OPENMP),t)
  OMPFLAGS := -mp
  CPPFLAGS += -D_OPENMP_
  CFLAGS   += -D_OPENMP_   # needed by err_dup.h
endif
ifeq ($(FOR_GPU),t)
  DEVICE := -ta=tesla:cc70 #-Minfo=all
  CPPFLAGS += -DFOR_GPU
  ifneq (,$(findstring ta=,$(DEVICE)))
    CPPFLAGS += -DACC_ENABLED
  endif
endif
ifneq ($(SINGLE),t)
  AUTODBL := -r8
else
  CPPFLAGS += -DSINGLE
endif

CC     := mpicc # mpicc #$(DEVICE)
CXX    := mpic++ #$(DEVICE)
FC     := mpif90 $(DEVICE) $(TAU_FLAG)
LD     := mpif90 $(DEVICE)

FFOPT := -O3
FFLAGS := $(OMPFLAGS) -I. $(AUTODBL) -g -fpic -traceback #-fpe0
FFLAGS_MOD_DOMAIN := $(FFLAGS)
LDFLAGS += $(OMPFLAGS) $(AUTODBL) -pgc++libs -llapack -lblas -traceback -g
LDFLAGS += -L/opt/intel/compilers_and_libraries_2019.5.281/linux/compiler/lib/intel64 -lirc
LDFLAGS += $(INTEL_IRC)
CPPFLAGS += -DNEPTUNE_COMPILER=$(NEPTUNE_COMPILER)

AR := ar

# ==========================================================
#
# Place here build settings that are both compiler-specific
# and platform-specific (and/or cpu-specific). This could be
# a variable definition or appending to an earlier defined
# variable. Can also do this in the first build settings
# section of this file
#
# Following these build settings, there may be additional
# compiler-specific build settings that apply to all platforms/cpus
# because they need to be set after the platform- and/or
# cpu-specific build settings set in this section.
#
# Also, if needed, in this section one can overwrite
# previous variable definitions

# no settings here yet

